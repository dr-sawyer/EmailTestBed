"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = require("crypto");
// tslint:disable-next-line:max-line-length
const regex = /\n| |-----BEGIN CERTIFICATE-----|-----END CERTIFICATE-----|-----BEGIN RSA PRIVATE KEY-----|-----END RSA PRIVATE KEY-----|-----BEGIN RSA PUBLIC KEY-----|-----END RSA PUBLIC KEY-----|-----BEGIN PRIVATE KEY-----|-----END PRIVATE KEY-----|-----BEGIN PUBLIC KEY-----|-----END PUBLIC KEY-----|ssh-rsa|(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/g;
var SUPPORTED_ALGORITHM;
(function (SUPPORTED_ALGORITHM) {
    SUPPORTED_ALGORITHM["MD4"] = "md4";
    SUPPORTED_ALGORITHM["MD5"] = "md5";
    SUPPORTED_ALGORITHM["RMD160"] = "rmd160";
    SUPPORTED_ALGORITHM["SHA1"] = "sha1";
    SUPPORTED_ALGORITHM["SHA224"] = "sha224";
    SUPPORTED_ALGORITHM["SHA256"] = "sha256";
    SUPPORTED_ALGORITHM["SHA384"] = "sha384";
    SUPPORTED_ALGORITHM["SHA512"] = "sha512";
})(SUPPORTED_ALGORITHM = exports.SUPPORTED_ALGORITHM || (exports.SUPPORTED_ALGORITHM = {}));
var SUPPORTED_ENCODING;
(function (SUPPORTED_ENCODING) {
    SUPPORTED_ENCODING["HEX"] = "hex";
    SUPPORTED_ENCODING["LATIN1"] = "latin1";
    SUPPORTED_ENCODING["BASE64"] = "base64";
})(SUPPORTED_ENCODING = exports.SUPPORTED_ENCODING || (exports.SUPPORTED_ENCODING = {}));
const DEFAULT_CONFIGURATION = {
    algorithm: SUPPORTED_ALGORITHM.SHA256,
    colons: false,
    encoding: SUPPORTED_ENCODING.HEX,
};
function _colons(fingerprintHex) {
    return fingerprintHex.replace(/(.{2})(?=.)/g, '$1:');
}
function fingerprint(cert, config = SUPPORTED_ALGORITHM.SHA256, useColons = false) {
    const { algorithm, colons, encoding } = Object.assign(Object.create(null), DEFAULT_CONFIGURATION, typeof config === 'string' ? { algorithm: config, colons: useColons } : config);
    const cleanKey = cert.replace(regex, '');
    const buffer = new Buffer(cleanKey, 'base64');
    const hash = crypto_1.createHash(algorithm.toLowerCase()).update(buffer).digest(encoding);
    return colons ? _colons(hash) : hash;
}
exports.fingerprint = fingerprint;
exports.default = fingerprint;
//# sourceMappingURL=index.js.map